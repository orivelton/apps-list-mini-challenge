{"version":3,"sources":["components/Nav.js","consts/config.js","api/get.js","components/Search.js","components/ListItem.js","components/Pagination.js","ultils/helpers.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Nav","initialState","handleCategories","categoriesActive","useState","categories","setCategories","active","setActive","useEffect","Set","map","flat","className","length","item","key","href","onClick","e","preventDefault","handleClick","getApps","a","url","urls","get","result","data","Search","valueSearch","handleSearchTerm","setIsCategories","type","placeholder","value","onChange","target","currency","config","ListItem","name","description","subscriptions","index","price","Pagination","currentPage","handleCurrentPage","pages","disabled","Array","pageSize","sortByascending","b","total","Object","defineProperty","prototype","chunkSize","chunks","i","this","push","slice","List","state","list","chunk","notFound","isCategories","setState","showResultSearch","updateView","loadData","dataLength","reduce","acc","cur","sort","formatData","firstPage","Math","ceil","replace","searchTerm","filter","includes","toLowerCase","handleSearch","resetList","propsSearch","propsPagination","propsNav","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3cfbb32.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Nav = ({initialState, handleCategories, categoriesActive}) => {\n  const [categories, setCategories] = useState([]);\n  const [active, setActive] = useState(categoriesActive);\n\n  useEffect(() => {\n    setCategories([...new Set(initialState.map(({categories}) => categories).flat())]);\n  }, [initialState]);\n\n  useEffect(() => {\n    setActive(categoriesActive)\n  },[categoriesActive]);\n\n\n  const handleClick = (e, item) => {\n    setActive(item);\n    e.preventDefault();\n    handleCategories(item);\n  }\n\n  return (\n    <nav className=\"nav-categories\">\n      <h2>Categories</h2>\n      <ul className=\"nav-menu\">\n        {\n          categories.length && categories.map(item => (\n            <li key={item} >\n              <button \n                href=\"/\"\n                className={active === item ? 'active' : ''}\n                onClick={e => handleClick(e, item)}>\n                {item}\n              </button>\n            </li>\n          ))\n        }\n        {/* <li className=\"active\"><a href=\"/\">Channels</a></li> */}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","export default {\n  apps: 'https://raw.githubusercontent.com/orivelton/apps-list-mini-challenge/master/src/mock/apps.json?token=ABVSRSVVU3BCGH7FK6I6NY26VREGW',\n  pageSize: 3,\n  currency: 'â‚¬'\n};\n","import { get } from 'axios';\nimport urls from '../consts/config';\n\nconst getApps = async (url = urls.apps) => {\n  const result = await get(url);\n  const { data } = result;\n  return data;\n};\n\nexport { getApps };\n","import React from 'react';\n\nconst Search = ({valueSearch, handleSearchTerm, setIsCategories}) => {\n  return (\n    <header>\n      <input \n        type=\"text\" \n        placeholder=\"Search by App\" \n        value={valueSearch} \n        onChange={({target: { value}}) => handleSearchTerm(value, true)}\n      />\n    </header>\n  )\n};\n\nexport default Search;\n","import React from 'react';\nimport config from '../consts/config';\nconst { currency } = config;\n\nconst ListItem = ({\n  name,\n  description,\n  categories,\n  subscriptions,\n  handleCategories\n}) => (\n  <li>\n    <div className=\"app-item\">\n      <div className=\"box-info\">\n        <div className=\"box-info--content\">\n          <div className=\"description\">\n            <h1>{name}</h1>\n            <p>{description}</p>\n          </div>\n          <div className=\"tags\">\n            { categories && categories.map((item, index) => \n                <span\n                  onClick={() => {handleCategories(item)}}\n                  key={item}\n                >\n                  {`${item} ${categories.length !== ++index ? '/ ' : ''}`}\n                </span>\n              )\n            }\n          </div>\n        </div>\n        <div className=\"box-info--footer\">\n          <ul>\n            {\n              subscriptions && subscriptions.map(({name, price}) => \n                <li key={name}>\n                  <span>{name}</span>\n                  <h3>\n                    {price ? price : 'Free'}\n                    <sup>{price ? currency : false}</sup>\n                  </h3>\n                </li>\n              )\n            }\n          </ul>\n        </div>\n      </div>\n    </div>\n  </li>\n);\n\nexport default ListItem;\n","import React from 'react';\n\nconst Pagination = ({currentPage, handleCurrentPage, pages}) => {\n  return (\n    <ul className=\"pagination\">\n      <li>\n        <button onClick={() => { handleCurrentPage(currentPage - 1)}} disabled={currentPage === 1}>&lt;</button>\n      </li>\n      {\n        pages && [...Array(pages)].map((item, index) => (\n          <li \n            onClick={() => { handleCurrentPage(index) }}\n            key={`${index}${item}`}\n            className={currentPage === (index + 1) ? 'active' : ''}\n          >\n            <button>{++index}</button>\n          </li>\n        ))\n      }\n      <li>\n        <button onClick={() => { handleCurrentPage(currentPage + 1)}} disabled={currentPage === pages}>&gt;</button>\n      </li>\n    </ul>\n  )\n};\n\nexport default Pagination;\n","/* eslint-disable no-extend-native */\nimport config from '../consts/config';\nconst {pageSize} = config;\n\n\nconst sortByascending = (a,b) => (a.total > b.total) ? 1 : ((b.total > a.total) ? -1 : 0);\nconst countPage = (dataLength) => Math.ceil( dataLength / pageSize);\n\nconst handleSearch = (chunk, searchTerm, isCategories) => {\n  return chunk.flat().filter((\n    {name, categories}\n  ) => isCategories ? categories.includes(searchTerm) : name.toLowerCase().includes(searchTerm.toLowerCase()));\n};\n\n\nObject.defineProperty(Array.prototype, 'chunk', {\n  value: function(chunkSize){\n      var chunks = [];\n      for (var i = 0; i < this.length; i+= chunkSize) chunks.push(this.slice(i,i+chunkSize))\n      return chunks;\n  }\n});\n\nconst formatData = data => {\n  if(!data.length) return [];\n\n  const formated = data.map(item => {\n    const {subscriptions, categories} = item;\n    const total = subscriptions.reduce((acc, cur) => acc + cur.price, 0);\n\n    categories.sort();\n    return {...item, total};\n  }).sort(sortByascending);\n  \n  return formated.chunk(pageSize);\n}\n\nexport { formatData, countPage, handleSearch };\n","import React, { Component } from 'react';\nimport { getApps } from '../api/get';\nimport Search from './Search';\nimport ListItem from './ListItem';\nimport Pagination from './Pagination';\n\nimport { formatData, countPage, handleSearch } from '../ultils/helpers';\nimport Nav from './Nav';\n\n class List extends Component {\n  state = {\n    list: [],\n    pages: 0,\n    chunk: [],\n    notFound: false,\n    valueSearch: '',\n    currentPage: 1,\n    isCategories: false,\n    initialState: [],\n    categoriesActive: null\n  };\n  \n  componentDidMount () {\n    const loadData = async () => {\n      const data = await getApps();\n      this.updateView(data);\n      this.setState({initialState: data})\n    }\n    \n    loadData(); \n  };\n\n  updateView(data) {\n    const result = formatData(data)\n    const [firstPage] = result;\n    this.setState({\n      list : firstPage,\n      pages: countPage(data.length),\n      chunk: result,\n      notFound: !firstPage\n    });\n  };\n\n  handleCurrentPage = (index) => {\n    const { chunk } = this.state;\n\n    this.setState({\n      list: chunk[index - 1],\n      currentPage: index\n    });\n  };\n\n  handleCategories = (item) => {\n    this.setState({ \n      isCategories: true,\n      categoriesActive: item\n    },\n      () => { this.handleSearchTerm(item)}\n    );\n  }\n\n  handleSearchTerm = (valueSearch, isCategories) => {\n    isCategories && this.setState({ isCategories: false, categoriesActive: null })\n    this.setState({valueSearch});\n    this.showResultSearch(valueSearch)\n  };\n\n  resetList() {\n    const { initialState } = this.state;\n    this.updateView(initialState);\n  };\n\n  showResultSearch (updateView) {\n    if(!updateView) {\n      this.resetList();\n      return;\n    };\n\n    if(!updateView.replace(/\\s/g,'')) return;\n\n    const {initialState, isCategories} = this.state;\n    this.updateView(handleSearch(initialState, updateView, isCategories));\n  };\n  \n  render() {\n    const {searchTerm, valueSearch, notFound, list, currentPage, pages, initialState, categoriesActive} = this.state;\n    const propsSearch = {searchTerm, valueSearch, handleCategories: this.handleCategories, handleSearchTerm: this.handleSearchTerm};\n    const propsPagination = {currentPage, pages, handleCurrentPage: this.handleCurrentPage};\n    const propsNav = {initialState, handleCategories: this.handleCategories, categoriesActive};\n\n    return (\n      <>\n        <Nav {...propsNav} />\n        <section className=\"apps-list\">\n          <Search {...propsSearch} />\n\n          {notFound && <p>no results found</p>}\n          {\n            !notFound &&\n            <ul>\n              {\n                list && list.map((item) => \n                  <ListItem\n                    key={item.id}\n                    {...item}\n                    handleCategories={this.handleCategories}\n                  />\n                )\n              }\n            </ul>\n          }\n\n          {(!notFound && pages !== 1) && <Pagination {...propsPagination} />}\n        </section>\n    </>\n    )\n  }\n};\n\nexport default List;\n","import React from 'react';\nimport Nav from './components/Nav';\nimport List from './components/List';\n\nconst App = () => {\n  return (\n    <div className=\"flex-container\">\n      <List />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}